name: multiple jobs/any failures

on:
  workflow_dispatch:
      
jobs:
  job1:
    name: pass - no error
    runs-on: ubuntu-latest
    outputs:
      had_issue: ${{ steps.set-bool.outputs.env_bool }}
    steps:
      - id: set-bool
        run: |
          # echo "env_bool='true'" >> $GITHUB_OUTPUT
          
  job2:
    name: fail with error
    runs-on: ubuntu-latest
    outputs:
      had_issue: ${{ steps.set-bool.outputs.env_bool }}
    steps:
      - id: set-bool
        run: |
          echo "env_bool='asdf'" >> $GITHUB_OUTPUT

  job3:
    name: pass2 - no error
    runs-on: ubuntu-latest
    outputs:
      had_issue: ${{ steps.set-bool.outputs.env_bool }}
    steps:
      - id: set-bool
        run: |
          # echo "env_bool='true'" >> $GITHUB_OUTPUT

  try-run:
    name: turn on or off
    runs-on: ubuntu-latest
    needs: [job1, job2, job3]
    # safest way as '' evaluates to false or if you hand in true/false those are both thruthy and you have to string compare.
    if: ${{ always() && contains(needs.*.outputs.had_issue, 'asdf') }}
    steps:
      - name: maybe runs
        run: |
          echo job1 ${{ needs.job1.outputs.had_issue }}
          echo job2 ${{ needs.job2.outputs.had_issue }}
          echo job3 ${{ needs.job3.outputs.had_issue }}
  
  output-debug:
    name: debug
    runs-on: ubuntu-latest
    needs: [job1, job2, job3]
    # safest way as '' evaluates to false or if you hand in true/false those are both thruthy and you have to string compare.
    steps:
      - name: def runs
        run: |
          echo star ${{ contains(needs.*.outputs.had_issue, 'asdf') }}
          echo job1 ${{ contains(needs.job1.outputs.had_issue, 'asdf') }}
          echo job2 ${{ contains(needs.job2.outputs.had_issue, 'asdf') }}
          echo job3 ${{ contains(needs.job3.outputs.had_issue, 'asdf') }}
          echo star ${{ contains(needs.*.outputs.had_issue, 'notthis') }}
          echo job1 ${{ contains(needs.job1.outputs.had_issue, 'notthis') }}
          echo job2 ${{ contains(needs.job2.outputs.had_issue, 'notthis') }}
          echo job3 ${{ contains(needs.job3.outputs.had_issue, 'notthis') }}

          echo "${needs[*]}"
          # for value in fromJson( ${{needs}}); do
          #   echo $value
          # done
          
